using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;
using System;
using System.Collections.Generic;
using System.IO;

namespace ConsoleApp2
{
    internal class ItextTest
    {
        private readonly string basePath = @"D:\DemoCreation\";

        public void PdfGen()
        {
            Document doc = new Document(PageSize.A4);
            PdfWriter.GetInstance(doc, new FileStream(basePath + "test.pdf", FileMode.Create));
            doc.Open();
            doc.Add(new Paragraph("Hello this pdf is generated by using iTextSharp"));
            doc.Close();
        }

        public void AddTextAndList()
        {
            Document doc = new Document();
            PdfWriter.GetInstance(doc, new FileStream(basePath + "text_list.pdf", FileMode.Create));
            doc.Open();

            doc.Add(new Paragraph("This is a paragraph."));
            doc.Add(new Chunk("This is a chunk (small text unit). "));
            doc.Add(new Phrase("This is a phrase combining chunks."));

            List list = new List(List.UNORDERED);
            list.Add(new ListItem("Item 1"));
            list.Add(new ListItem("Item 2"));
            list.Add(new ListItem("Item 3"));
            doc.Add(list);

            doc.Close();
        }

        public void AddTable()
        {
            Document doc = new Document();
            PdfWriter.GetInstance(doc, new FileStream(basePath + "table.pdf", FileMode.Create));
            doc.Open();

            PdfPTable table = new PdfPTable(3);
            table.AddCell("Cell 1");
            table.AddCell("Cell 2");
            table.AddCell("Cell 3");

            PdfPCell cell = new PdfPCell(new Phrase("Merged Cell"));
            cell.Colspan = 3;
            cell.HorizontalAlignment = Element.ALIGN_CENTER;
            table.AddCell(cell);

            doc.Add(table);
            doc.Close();
        }

        public void AddImage()
        {
            Document doc = new Document();
            PdfWriter.GetInstance(doc, new FileStream(basePath + "image.pdf", FileMode.Create));
            doc.Open();

            iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(basePath + "sample.jpg");
            img.ScaleToFit(200f, 200f);
            img.SetAbsolutePosition(100, 500);
            doc.Add(img);

            doc.Close();
        }

        public void DrawShapes()
        {
            Document doc = new Document();
            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(basePath + "shapes.pdf", FileMode.Create));
            doc.Open();

            PdfContentByte cb = writer.DirectContent;
            cb.Rectangle(100, 600, 200, 100);
            cb.Stroke();

            cb.BeginText();
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            cb.SetFontAndSize(bf, 14);
            cb.ShowTextAligned(Element.ALIGN_LEFT, "Hello", 120, 640, 0);
            cb.EndText();

            doc.Close();
        }

        public void ReadPdf()
        {
            using (PdfReader reader = new PdfReader(basePath + "test.pdf"))
            {
                string text = "";
                for (int i = 1; i <= reader.NumberOfPages; i++)
                {
                    text += PdfTextExtractor.GetTextFromPage(reader, i);
                }
                Console.WriteLine(text);
            }
        }

        public void MergePdfs(string[] files, string output)
        {
            Document doc = new Document();
            PdfCopy copy = new PdfCopy(doc, new FileStream(basePath + output, FileMode.Create));
            doc.Open();

            foreach (string file in files)
            {
                PdfReader reader = new PdfReader(basePath + file);
                for (int i = 1; i <= reader.NumberOfPages; i++)
                {
                    copy.AddPage(copy.GetImportedPage(reader, i));
                }
                reader.Close();
            }
            doc.Close();
        }

        public void AddWatermark()
        {
            PdfReader reader = new PdfReader(basePath + "test.pdf");
            using (FileStream fs = new FileStream(basePath + "watermarked.pdf", FileMode.Create))
            {
                PdfStamper stamper = new PdfStamper(reader, fs);
                int n = reader.NumberOfPages;
                for (int i = 1; i <= n; i++)
                {
                    PdfContentByte under = stamper.GetUnderContent(i);
                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    under.BeginText();
                    under.SetFontAndSize(bf, 50);
                    under.ShowTextAligned(Element.ALIGN_CENTER, "WATERMARK", 300, 400, 45);
                    under.EndText();
                }
                stamper.Close();
            }
            reader.Close();
        }

        public void FillForm()
        {
            PdfReader reader = new PdfReader(basePath + "form.pdf");
            using (FileStream fs = new FileStream(basePath + "filled_form.pdf", FileMode.Create))
            {
                PdfStamper stamper = new PdfStamper(reader, fs);
                AcroFields fields = stamper.AcroFields;
                fields.SetField("Name", "John Doe");
                fields.SetField("Email", "john@example.com");
                stamper.Close();
            }
            reader.Close();
        }

        public void AddMetaData()
        {
            Document doc = new Document();
            PdfWriter.GetInstance(doc, new FileStream(basePath + "metadata.pdf", FileMode.Create));
            doc.AddAuthor("Dervin");
            doc.AddCreator(".NET iTextSharp Demo");
            doc.AddTitle("Sample PDF with Metadata");
            doc.Open();
            doc.Add(new Paragraph("This document has metadata."));
            doc.Close();
        }
    }
}

